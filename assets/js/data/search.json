[ { "title": "Neural Compute Stick 2", "url": "/posts/Neural-Compute-Stick/", "categories": "DevLog, Github", "tags": "Series", "date": "2022-10-10 14:18:00 +0900", "snippet": "Neural Compute Stick 2 (NCS2)디바이스마트 상품페이지Neural Compute Stick 2. 115,500에 달하는 가격.1세대 대비 8배 빠른 성능을 자랑한다고 한다.초심자의 시선 다루기 어려워 보인다. 전문적인 도구 같다. 인공지능 분야에서 처리 성능을 높이기 위해 쓰는 것 같다.개발 일정 11월 10일(30일) 내로 이 제품을 이용해 카메라로 사물 인식에 성공하는 걸 목표로 작업. 서브 목표 10.11 ~ 10.20 : 하루 30분씩 10일, 개발환경 조사, 개발환경 맞추기 10.21 ~ 10.30 : 하루 45분씩 10일, 인공지능 예제 하나 돌리기 11.1 ~ 11.10 : 하루 1시간씩 10일, NSC2 이용해서 성능 향상시키기. 11.11 (토) : 브리핑" }, { "title": "Logs of Github Page - 2", "url": "/posts/Github-Blog-2/", "categories": "DevLog, Github", "tags": "Series", "date": "2022-08-16 09:58:00 +0900", "snippet": "Github 블로그 제작 기록앞으로의 방향 댓글 기능 적용 (disqus, 다른 것들도) Hexo 등 다른 Github 호스팅 플랫폼 이용해보기 (https://velog.io/@recordboy/%ED%97%A5%EC%86%8CHEXO%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EA%B9%83%ED%97%88%EB%B8%8C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0) 다양한 테마 살펴보기(https://martinkang.github.io/) 구글에 페이지 등록하기" }, { "title": "Logs of Github Page - 1", "url": "/posts/Github-Blog-1/", "categories": "DevLog, Github", "tags": "Series", "date": "2022-08-16 08:45:00 +0900", "snippet": "Github 블로그 제작 기록개요나만의 웹사이트를 만드는 프로젝트.큰 기능들에 맞추어 내 블로그 제작 방법을 기록할 것이다.내가 작업한 내용 github 계정 만들기 (이미 있다면 로그인하기) ‘계정 이름.github.io’라는 이름으로 repository 만들기 default branch를 main으로 하기 로컬 특정 위치에 clone하기(나는 Github Desktop으로 했다)여기서부터 📒Github Blog 만들기-1 (velog.io) 사이트를 참고함. ruby3.1.2-1 x86 다운로드 &amp; 설치 start command prompt with Ruby에서 cd로 로컬 repository 폴더 경로로 이동했다. ruby에 jekyll 설치. &gt; gem install jekyll bundler (ruby 3.0ver 이상) ruby에 webrick 설치 &gt; gem install webrick jekyll 생성 &gt; jekyll new ./ -&gt; 에러가 뜰 것이다. 로컬 repository 경로 내 파일을 전부 삭제한다. (.git 폴더 제외.) 다시 jekyll 생성 &gt; jekyll new ./ -&gt; 성공 jekyll 생성 명령어는 jekyll 기본 테마로 한 새로운 페이지를 만들어 줍니다. bundle 설치 &gt; bundle install jekyll 서버 작동 &gt; bundle exec jekyll serve -&gt; 에러가 뜰 수도 있다. webrick 라이브러리 관련 에러고 webrick 설치하면 완료. &gt; bundle add webrick 다시 jekyll 서버 작동 &gt; bundle exec jekyll serve jekyll 접속 - 127.0.0.1:4000(또는 localhost:4000) 주소로 들어가면 아까 생성한 웹사이트를 볼 수 있다.여기서부터 📒Github Blog 만들기-2 (velog.io) 사이트를 참고함. 적용하고픈 테마 다운받기. 나는 jekyll-theme-chripy 들어가서 zip로 다운받았다. zip 파일을 풀고 로컬 repository 폴더에 붙여넣었다. 그 후, 로컬 repository에서 삭제해야할 파일들이 있다. Gemfile.lock docs 폴더 .travis.tml _posts.docs (나는 _posts 폴더가 있었는데 그냥 두었다.) .github 폴더에서 workflows 폴더(와 그 하위 디렉터리)만 남기고 나머지 삭제. .github/workflows 폴더에서 commitlint.yml과 page-deploy.yml.hook 외에 다 지우기 page-deploy.yml.hook의 이름을 page-deploy.yml로 변경하기 start command prompt with Ruby를 관리자 권한으로 실행한 후 cd로 로컬 repository 폴더 경로로 이동했다. bundle 설치 &gt; bundle install _config.yml 파일 수정하기 url : ‘http://gyfolder.github.io’ (내 계정 이름이 gyfolder이므로.) .github/workflows/page-deploy.yml 파일 수정하기 branches: - master -&gt; - main으로 변경한다. ruby-version: 2.7 -&gt; 3.1으로 변경한다.(난 3.1버전을 설치했으므로)) 로컬 repository 에서 커밋.(git bach 이용하거나 Github Desktop 이용.) gh-pages 브랜치가 새로 생성되고 빌드가 성공하면 github 사이트에서 ‘계정 이름.github.io’ repository로 들어간 후 Settings - Pages - Branch를 gh-pages로 바꿔준다. 주소창에 계정 이름.github.io를 검색하면 아까 로컬로 빌드했었던 모습이 뜰 것이다." }, { "title": "앞으로 블로그를 만들어나가는 방향성 생각하기", "url": "/posts/0001/", "categories": "Development", "tags": "daily", "date": "2022-08-12 11:27:00 +0900", "snippet": "개요블로그 관리는 끈기가 진짜 많이 필요하다. 그래서, 블로그 글 쓰는 행위가 항상 꼭 있으면 나에게 좋고 의미있는 활동으로 내가 느껴야 한다고 생각한다. 1일 1커밋을 만들기 위해, 그리고 배운 것을 글로써 정리해서 내 지식으로 만들기 위해 이렇게 글을 쓰기 시작한다.컨텐츠 Github Blog 제작기 컨텐츠우선 나는 Github Blog를 거의 모르는 상태이다. 그러니까, GitHub의 여러 기능들에 대해 포스트하면 괜찮을 것이다. 포스팅하면 할 수록 내 블로그 글이 다양해진다는 재미도 찾을 수 있다. 또한 이 부분 컨텐츠는 정리력과 설명력을 기를 수 있고 동시에 Github Blog에 입문하는 사람들에게 좋은 컨텐츠가 될 수 있다고 생각한다.그 외 생각나는 컨텐츠 최근 개발 언어 이때까지 경험한 개발 언어유튜버나 인스타툰 작가님들이 Notion을 쓰면서 아이디어 정리를 하는 모습을 봤다. 그 아이디어 정리하는 습관을 만들기 전까지는 컨텐츠 욕심은 버리고 조그만 목표로 계속 나아가야 할 것이다." }, { "title": "Notifications!", "url": "/posts/Notice/", "categories": "Tutorial", "tags": "getting started", "date": "2022-08-11 23:55:00 +0900", "snippet": "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of Ruby, RubyGems, Jekyll, and Bundler. In addition, Git is also required to be installed.InstallationCreating a New SiteThere are two ways to create a new repository for this theme: Using the Chirpy Starter - Easy to upgrade, isolates irrelevant project files so you can focus on writing. Forking on GitHub - Convenient for custom development, but difficult to upgrade. Unless you are familiar with Jekyll and are determined to tweak or contribute to this project, this approach is not recommended.Option 1. Using the Chirpy StarterCreate a new repository from the Chirpy Starter and name it &lt;GH_USERNAME&gt;.github.io, where GH_USERNAME represents your GitHub username.Option 2. Forking on GitHubFork Chirpy on GitHub and rename it to &lt;GH_USERNAME&gt;.github.io. Please note that the default branch code is in development. If you want the site to be stable, please switch to the latest tag and start writing.And then execute:$ bash tools/init.sh If you don’t want to deploy your site on GitHub Pages, append option --no-gh at the end of the above command.The above command will: Removes some files or directories from your repository: .travis.yml files under _posts If the option --no-gh is provided, the directory .github will be deleted. Otherwise, set up the GitHub Action workflow by removing the extension .hook of .github/workflows/pages-deploy.yml.hook, and then remove the other files and directories in the folder .github. Removes item Gemfile.lock from .gitignore. Creates a new commit to save the changes automatically.Installing DependenciesBefore running for the first time, go to the root directory of your site, and install dependencies as follows:$ bundleUsageConfigurationUpdate the variables of _config.yml as needed. Some of them are typical options: url avatar timezone langCustoming StylesheetIf you need to customize the stylesheet, copy the theme’s assets/css/style.scss to the same path on your Jekyll site, and then add the custom style at the end of the style file.Starting from v4.1.0, if you want to overwrite the SASS variables defined in _sass/addon/variables.scss, create a new file _sass/variables-hook.scss and assign new values to the target variable in it.Customing Static AssetsStatic assets configuration was introduced in version 5.1.0. The CDN of the static assets is defined by file _data/assets/cross_origin.yml, and you can replace some of them according to the network conditions in the region where your website is published.Also, if you’d like to self-host the static assets, please refer to the chirpy-static-assets.Running Local ServerYou may want to preview the site contents before publishing, so just run it by:$ bundle exec jekyll sOr run the site on Docker with the following command:$ docker run -it --rm \\ --volume=\"$PWD:/srv/jekyll\" \\ -p 4000:4000 jekyll/jekyll \\ jekyll serveAfter a while, the local service will be published at http://127.0.0.1:4000.DeploymentBefore the deployment begins, check out the file _config.yml and make sure the url is configured correctly. Furthermore, if you prefer the project site and don’t use a custom domain, or you want to visit your website with a base URL on a web server other than GitHub Pages, remember to change the baseurl to your project name that starts with a slash, e.g, /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy by Using Github ActionsFor security reasons, GitHub Pages build runs on safe mode, which restricts us from using plugins to generate additional page files. Therefore, we can use GitHub Actions to build the site, store the built site files on a new branch, and use that branch as the source of the GitHub Pages service.Quickly check the files needed for GitHub Actions build: Ensure your Jekyll site has the file .github/workflows/pages-deploy.yml. Otherwise, create a new one and fill in the contents of the sample file, and the value of the on.push.branches should be the same as your repo’s default branch name. Ensure your Jekyll site has file tools/deploy.sh. Otherwise, copy it from here to your Jekyll site. Furthermore, if you have committed Gemfile.lock to the repo, and your runtime system is not Linux, don’t forget to update the platform list in the lock file: $ bundle lock --add-platform x86_64-linux After the above steps, rename your repository to &lt;GH_USERNAME&gt;.github.io on GitHub.Now publish your Jekyll site by: Push any commit to remote to trigger the GitHub Actions workflow. Once the build is complete and successful, a new remote branch named gh-pages will appear to store the built site files. Browse to your repository on GitHub. Select the tab Settings, then click Pages in the left navigation bar, and then in the section Source of GitHub Pages, select the /(root) directory of branch gh-pages as the publishing source. Remember to click Save before leaving. Visit your website at the address indicated by GitHub. Manually Build and DeployOn self-hosted servers, you cannot enjoy the convenience of GitHub Actions. Therefore, you should build the site on your local machine and then upload the site files to the server.Go to the root of the source project, and build your site as follows:$ JEKYLL_ENV=production bundle exec jekyll bOr build the site on Docker:$ docker run -it --rm \\ --env JEKYLL_ENV=production \\ --volume=\"$PWD:/srv/jekyll\" \\ jekyll/jekyll \\ jekyll buildUnless you specified the output path, the generated site files will be placed in folder _site of the project’s root directory. Now you should upload those files to the target server.UpgradingIt depends on how you use the theme: If you are using the theme gem (there will be gem \"jekyll-theme-chirpy\" in the Gemfile), editing the Gemfile and update the version number of the theme gem, for example: - gem \"jekyll-theme-chirpy\", \"~&gt; 3.2\", \"&gt;= 3.2.1\"+ gem \"jekyll-theme-chirpy\", \"~&gt; 3.3\", \"&gt;= 3.3.0\" And then execute the following command: $ bundle update jekyll-theme-chirpy As the version upgrades, the critical files (for details, see the Startup Template) and configuration options will change. Please refer to the Upgrade Guide to keep your repo’s files in sync with the latest version of the theme. If you forked from the source project (there will be gemspec in the Gemfile of your site), then merge the latest upstream tags into your Jekyll site to complete the upgrade.The merge is likely to conflict with your local modifications. Please be patient and careful to resolve these conflicts. " }, { "title": "Start Giyong's Blog", "url": "/posts/Start-Giyong-s-blog/", "categories": "Blogging, Tutorial", "tags": "first_commit, helloworld", "date": "2022-08-11 22:55:00 +0900", "snippet": "Hello world!! Finally I made my own Blog site thanks to the Github!Stay tuned, I decided to achieve my green playground! 1 day 1 commit I’ll keep commiting on over 3 month, That is my goal by now!" } ]
